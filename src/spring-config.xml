<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--
        This enables @AspectJ style of declaring aspects using Java 5 annotations. As noted in the Spring documentation:

        "Spring 2.0 interprets the same annotations as AspectJ 5, using a library supplied by AspectJ for
        pointcut parsing and matching. The AOP runtime is still pure Spring AOP though, and
        there is no dependency on the AspectJ compiler or weaver."

    -->
    <aop:aspectj-autoproxy/>

    <context:component-scan base-package="grandcloud">
        <context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
    </context:component-scan>


</beans>